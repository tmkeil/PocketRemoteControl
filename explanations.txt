# Just once to initialize a virtual environment inside this project to keep the system clear
python -m venv venv

# Every time before starting to work
venv\Scripts\activate

# To exit the virtual environment
deactivate

# Installing all required packages
pip install -r requirements.txt

# To run the ... run either
python -m backend.main
uvicorn backend.main:app --reload

# To install cloudflared and to start a tunnel
sh install_cloudflared.sh

# To list the running tunnels in the background
ps aux | grep cloudflared

# To kill a tunnel
kill <tunnel id>

# Test if authentication works
curl -X GET http://localhost:8000/status -H "Authorization: Bearer <token>"





Steps:
1. Running install_cloudflared.sh
1.1 Creates a virtual python environment and installs dependencies listed in requirements
1.2 Installs cloudflared
1.3 Starts a quick cloudflared tunnel on http://localhost:8000
1.4 Extracts the URL
1.5 Runs generate_qr_code.py, which generates a URL QR-Code
1.6 Runs setup.py, which creates the JWT token and creates also a QR Code out of it.
1.7 Starts the backend by running backend/main.py, which provides the REST-endpoints: GET /status, POST /shutdown, GET /qr

Then starts the node server for avoiding CORS problems. The frontend sends http requests to the node server
and not directly to the backend through cloudflare.

2. Running the react native app on the phone.
2.1 On the login screen the client will be prompted 2 fields. One for the API URL where the cloudflare tunnel is reachable
and the other field for the jwt token. Both can be scanned as QR Codes. When pressing on login the jwt token gets validated and the client gets redirected to the home screen.
There he has 2 tabs. Home and Shutdown. On the home screen he can show the machine resources and on the shutdown he can click the
button to shutdown the machine.


# Creating the react native expo app
# Create the subdir "mobile-app" inside the project
npx create-expo-app mobile-app
# or: npx create-expo-app mobile-app --template blank

# Switch to the expo app directory
cd mobile-app

# Launch the app
npx expo start

# To reset to a fresh project
npm run reset-project

# Create a development build on EAS

# Install the EAS CLI globally and log in to your Expo account
npm install -g eas-cli && eas login

# Configure EAS Build (run once per project)
eas build:configure

# Install expo-dev-client (required for development builds)
npx expo install expo-dev-client

# Only needed if you made changes to the native code (android/ or ios/ folders)
npx expo prebuild --clean

# Build the development version of your native app (Android)
eas build --platform android --profile development

# Build the development version of your native app (iOS)
eas build --platform ios --profile development

# After the build is finished, share the download link or QR code to install the app